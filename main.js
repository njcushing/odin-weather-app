(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,SAAS;IACT,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,uBAAuB;IACvB,qBAAqB;AACzB",sourcesContent:[":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}"],sourceRoot:""}]);const s=i},439:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Outfit&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap);"]),i.push([e.id,'/* Fonts */\n\n:root {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --staatliches-font-family: Staatliches, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --outfit-font-family: Outfit, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    \n    --weather-app-scale: 1.0;\n    --weather-app-temperature-font-size: 5rem;\n    --weather-app-search-bar-input-height: 2rem;\n    --weather-app-search-bar-button-size: 2.4rem;\n}\n\n.weather-app-container {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    gap: 0.5rem;\n}\n\n.weather-app-info-container {\n    grid-area: 1 / 1 / 2 / -1;\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(10, auto);\n    background-color: rgba(0, 0, 0, 0.3);\n    outline: 2px solid #000;\n    border-radius: 1rem;\n    padding: 1rem;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-temperature {\n    grid-area: 1 / 1 / 6 / 6;\n    font-family: var(--outfit-font-family);\n    font-size: calc(var(--weather-app-temperature-font-size, 5rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar {\n    grid-area: 2 / 1 / -1 / -1;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    width: 100%;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-input {\n    align-self: center;\n    height: calc(var(--weather-app-search-bar-input-height, 2rem) * var(--weather-app-scale, 1));\n    outline: 1px solid black;\n    border: none;\n    border-radius: 0.4rem;\n    font-family: var(--nunito-font-family);\n    font-size: calc(var(--weather-app-search-bar-input-height, 2rem) * 0.9);\n    padding: calc(0.4rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-button {\n    justify-self: end;\n    align-self: center;\n    width: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    height: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #e7e7e7;\n}\n.weather-app-search-bar-button:hover {\n    outline: 1px solid rgb(70, 70, 70);\n    background-color: #f3f3f3;\n}\n.weather-app-search-bar-button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #c5c5c5;\n}',"",{version:3,sources:["webpack://./src/weather-app-styles-default.lazy.css"],names:[],mappings:"AAAA,UAAU;;AAGV;IACI;4EACwE;IACxE;4EACwE;IACxE;4EACwE;IACxE;4EACwE;IACxE;4EACwE;;IAExE,wBAAwB;IACxB,yCAAyC;IACzC,2CAA2C;IAC3C,4CAA4C;AAChD;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,WAAW;AACf;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,oCAAoC;IACpC,uCAAuC;IACvC,oCAAoC;IACpC,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,+CAA+C;AACnD;;AAEA;IACI,wBAAwB;IACxB,sCAAsC;IACtC,6FAA6F;AACjG;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,+BAA+B;IAC/B,WAAW;IACX,+CAA+C;AACnD;;AAEA;IACI,kBAAkB;IAClB,4FAA4F;IAC5F,wBAAwB;IACxB,YAAY;IACZ,qBAAqB;IACrB,sCAAsC;IACtC,uEAAuE;IACvE,mDAAmD;AACvD;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,4FAA4F;IAC5F,6FAA6F;IAC7F,sBAAsB;IACtB,kCAAkC;IAClC,YAAY;IACZ,qBAAqB;IACrB,yBAAyB;AAC7B;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B",sourcesContent:['/* Fonts */\n@import url(\'https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Outfit&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap\');\n\n:root {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --staatliches-font-family: Staatliches, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --outfit-font-family: Outfit, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    \n    --weather-app-scale: 1.0;\n    --weather-app-temperature-font-size: 5rem;\n    --weather-app-search-bar-input-height: 2rem;\n    --weather-app-search-bar-button-size: 2.4rem;\n}\n\n.weather-app-container {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    gap: 0.5rem;\n}\n\n.weather-app-info-container {\n    grid-area: 1 / 1 / 2 / -1;\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(10, auto);\n    background-color: rgba(0, 0, 0, 0.3);\n    outline: 2px solid #000;\n    border-radius: 1rem;\n    padding: 1rem;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-temperature {\n    grid-area: 1 / 1 / 6 / 6;\n    font-family: var(--outfit-font-family);\n    font-size: calc(var(--weather-app-temperature-font-size, 5rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar {\n    grid-area: 2 / 1 / -1 / -1;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    width: 100%;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-input {\n    align-self: center;\n    height: calc(var(--weather-app-search-bar-input-height, 2rem) * var(--weather-app-scale, 1));\n    outline: 1px solid black;\n    border: none;\n    border-radius: 0.4rem;\n    font-family: var(--nunito-font-family);\n    font-size: calc(var(--weather-app-search-bar-input-height, 2rem) * 0.9);\n    padding: calc(0.4rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-button {\n    justify-self: end;\n    align-self: center;\n    width: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    height: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #e7e7e7;\n}\n.weather-app-search-bar-button:hover {\n    outline: 1px solid rgb(70, 70, 70);\n    background-color: #f3f3f3;\n}\n.weather-app-search-bar-button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #c5c5c5;\n}'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var p=0;p<e.length;p++){var l=[].concat(e[p]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],p=r.base?c[0]+r.base:c[0],l=o[p]||0,A="".concat(p," ").concat(l);o[p]=l+1;var u=t(A),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(d);else{var m=a(d,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),p=0;p<o.length;p++){var l=t(o[p]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),p=t(216),l=t.n(p),A=t(589),u=t.n(A),d=t(28),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),n()(d.Z,m),d.Z&&d.Z.locals&&d.Z.locals;var h=t(439),f={};h.Z&&h.Z.locals&&(f.locals=h.Z.locals);var g,C=0,y={};y.styleTagTransform=u(),y.setAttributes=c(),y.insert=i().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=l(),f.use=function(e){return y.options=e||{},C++||(g=n()(h.Z,y)),f},f.unuse=function(){C>0&&!--C&&(g(),g=null)};const b=f,I=document.querySelector("body"),w=(()=>{let e=null;const n=(e=[],n=null,t="",r="")=>{const a=document.createElement("div");e.forEach((e=>{"string"==typeof e&&e.length>0&&a.classList.add(e)})),"string"==typeof t&&t.length>0&&a.setAttribute("id",t),"string"==typeof r&&r.length>0&&(a.textContent=r);try{n&&n.appendChild(a)}catch(e){console.log(e)}return a},t=n(["weather-app-container"]),r=n(["weather-app-info-container"],t),a=n(["weather-app-temperature"],r),o=n(["weather-app-country"],r),i=n(["weather-app-city"],r),s=n(["weather-app-region"],r),c=async n=>{try{const t=await l(),r=await fetch(`https://api.weatherapi.com/v1/current.json?key=${t}&q=${n}`,{mode:"cors"});if(!r.ok)throw new Error("Weather response is not ok.");const a=await r.json();e=p(a),m()}catch(e){console.log(`Error! ${e.message}`)}},p=e=>({countryName:e.location.country,cityName:e.location.name,region:e.location.region,localTime:e.location.localtime,tempc:e.current.temp_c,tempf:e.current.temp_f,humidity:e.current.humidity,windDeg:e.current.wind_degree,windDir:e.current.wind_dir,windSpeedMph:e.current.wind_mph,windSpeedKph:e.current.wind_kph,precipInch:e.current.precip_in,precipMm:e.current.precip_mm,conditionText:e.current.condition.text,conditionIcon:e.current.condition.icon,lastUpdated:e.current.last_updated}),l=()=>"defd47dda70843cfaa084416232506",A=n(["weather-app-search-bar"]),u=document.createElement("input"),d=document.createElement("button");u.classList.add("weather-app-search-bar-input"),d.classList.add("weather-app-search-bar-button"),d.classList.add("material-symbols-rounded"),d.textContent="Search",d.addEventListener("click",(()=>{c(u.value)})),A.appendChild(u),A.appendChild(d),t.appendChild(A);const m=async()=>{if(e)try{a.textContent=`${e.tempc}°C`,o.textContent=e.countryName,i.textContent=e.cityName,s.textContent=e.region}catch(e){console.log(`Weather app refresh error: ${e.message}`)}};return c("london"),t})();I.appendChild(w),b.use()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,