(()=>{"use strict";var e={28:(e,n,a)=>{a.d(n,{Z:()=>p});var t=a(537),r=a.n(t),o=a(645),i=a.n(o)()(r());i.push([e.id,":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,SAAS;IACT,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,uBAAuB;IACvB,qBAAqB;AACzB",sourcesContent:[":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}"],sourceRoot:""}]);const p=i},439:(e,n,a)=>{a.d(n,{Z:()=>p});var t=a(537),r=a.n(t),o=a(645),i=a.n(o)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Outfit&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap);"]),i.push([e.id,'/* Fonts */\n\n:root {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --staatliches-font-family: Staatliches, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --outfit-font-family: Outfit, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    \n    --weather-app-scale: 1.0;\n    --weather-app-min-width: 28rem;\n    --weather-app-max-width: 36rem;\n    --weather-app-info-buttons-size: 1.6rem;\n    --weather-app-info-buttons-font-size: 1rem;\n    --weather-app-city-font-size: 2rem;\n    --weather-app-region-font-size: 0.9rem;\n    --weather-app-country-font-size: 1.4rem;\n    --weather-app-temperature-font-size: 5rem;\n    --weather-app-icon-width: 3rem;\n    --weather-app-condition-font-size: 1.2rem;\n    --weather-app-wind-speed-font-size: 1rem;\n    --weather-app-wind-direction-font-size: 1rem;\n    --weather-app-humidity-font-size: 1rem;\n    --weather-app-precipitation-font-size: 1rem;\n    --weather-app-last-updated-font-size: 0.7rem;\n    --weather-app-search-bar-input-height: 2rem;\n    --weather-app-search-bar-button-size: 2.4rem;\n    --weather-app-search-bar-button-font-size: 1rem;\n}\n\n.weather-app-container {\n    display: grid;\n    grid-template-rows: repeat(3, auto);\n    gap: 0.5rem;\n    min-width: calc(var(--weather-app-min-width, 28rem) * var(--weather-app-scale, 1));\n    max-width: calc(var(--weather-app-max-width, 36rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-info-buttons {\n    grid-area: 1 / 1 / 2 / -1;\n    display: flex;\n    flex-wrap: nowrap;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-info-buttons > button {\n    height: calc(var(--weather-app-info-buttons-size, 1.6rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    font-size: calc(var(--weather-app-info-buttons-font-size, 1rem) * var(--weather-app-scale, 1));\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #eeeeee;\n    padding: 0rem calc(0.5rem * var(--weather-app-scale, 1));;\n}\n.weather-app-info-buttons > button:hover {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #f8f8f8;\n}\n.weather-app-info-buttons > button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #d1d1d1;\n}\n\n.weather-app-info-container {\n    grid-area: 2 / 1 / 3 / -1;\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(2, auto);\n    justify-items: center;\n    background-color: white;\n    outline: 2px solid #000;\n    border-radius: 1rem;\n    padding: 1rem;\n    gap: calc(0.3rem * var(--weather-app-scale, 1)) calc(1.0rem * var(--weather-app-scale, 1));\n}\n.weather-app-info-container.loading > * {\n    display: none;\n}\n.weather-app-info-container.loading::after {\n    content: "Loading...";\n    grid-area: 1 / 1 / -1 / -1;\n    align-self: center;\n}\n\n.weather-app-city {\n    grid-area: 1 / 2 / 2 / -1;\n    font-size: calc(var(--weather-app-city-font-size, 2rem) * var(--weather-app-scale, 1));\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.weather-app-region {\n    grid-area: 2 / 2 / 3 / -1;\n    font-size: calc(var(--weather-app-region-font-size, 0.9rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-country {\n    grid-area: 3 / 2 / 4 / -1;\n    font-size: calc(var(--weather-app-country-font-size, 1.4rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-temperature {\n    grid-area: 1 / 1 / 4 / 2;\n    font-family: var(--outfit-font-family);\n    font-size: calc(var(--weather-app-temperature-font-size, 5rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-icon {\n    grid-area: 4 / 1 / 7 / 2;\n    width: calc(var(--weather-app-icon-width, 3rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-condition {\n    grid-area: 7 / 1 / 9 / 2;\n    font-size: calc(var(--weather-app-condition-font-size, 1.2rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-wind-speed {\n    grid-area: 5 / 2 / 6 / -1;\n    font-size: calc(var(--weather-app-wind-speed-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-wind-direction {\n    grid-area: 6 / 2 / 7 / -1;\n    font-size: calc(var(--weather-app-wind-direction-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-humidity {\n    grid-area: 7 / 2 / 8 / -1;\n    font-size: calc(var(--weather-app-humidity-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-precipitation {\n    grid-area: 8 / 2 / 9 / -1;\n    font-size: calc(var(--weather-app-precipitation-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-last-updated {\n    grid-area: 10 / 1 / -1 / -1;\n    font-size: calc(var(--weather-app-last-updated-font-size, 0.7rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar {\n    grid-area: 3 / 1 / -1 / -1;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    width: 100%;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-input {\n    align-self: center;\n    height: calc(var(--weather-app-search-bar-input-height, 2rem) * var(--weather-app-scale, 1));\n    outline: 1px solid black;\n    border: none;\n    border-radius: 0.4rem;\n    font-family: var(--nunito-font-family);\n    font-size: calc(var(--weather-app-search-bar-input-height, 2rem) * 0.9);\n    padding: calc(0.4rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-button {\n    justify-self: end;\n    align-self: center;\n    width: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    height: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    font-size: calc(var(--weather-app-search-bar-button-font-size, 1rem) * var(--weather-app-scale, 1));\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #eeeeee;\n}\n.weather-app-search-bar-button:hover {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #f8f8f8;\n}\n.weather-app-search-bar-button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #d1d1d1;\n}',"",{version:3,sources:["webpack://./src/weather-app-styles-default.lazy.css"],names:[],mappings:"AAAA,UAAU;;AAGV;IACI;4EACwE;IACxE;4EACwE;IACxE;4EACwE;IACxE;4EACwE;IACxE;4EACwE;;IAExE,wBAAwB;IACxB,8BAA8B;IAC9B,8BAA8B;IAC9B,uCAAuC;IACvC,0CAA0C;IAC1C,kCAAkC;IAClC,sCAAsC;IACtC,uCAAuC;IACvC,yCAAyC;IACzC,8BAA8B;IAC9B,yCAAyC;IACzC,wCAAwC;IACxC,4CAA4C;IAC5C,sCAAsC;IACtC,2CAA2C;IAC3C,4CAA4C;IAC5C,2CAA2C;IAC3C,4CAA4C;IAC5C,+CAA+C;AACnD;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,WAAW;IACX,kFAAkF;IAClF,kFAAkF;AACtF;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,iBAAiB;IACjB,+CAA+C;AACnD;;AAEA;IACI,wFAAwF;IACxF,sBAAsB;IACtB,8FAA8F;IAC9F,kCAAkC;IAClC,YAAY;IACZ,qBAAqB;IACrB,yBAAyB;IACzB,wDAAwD;AAC5D;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,oCAAoC;IACpC,sCAAsC;IACtC,qBAAqB;IACrB,uBAAuB;IACvB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,0FAA0F;AAC9F;AACA;IACI,aAAa;AACjB;AACA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;IACzB,sFAAsF;IACtF,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,0FAA0F;IAC1F,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,2FAA2F;IAC3F,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;IACxB,sCAAsC;IACtC,6FAA6F;IAC7F,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;IACxB,8EAA8E;AAClF;;AAEA;IACI,wBAAwB;IACxB,6FAA6F;AACjG;;AAEA;IACI,yBAAyB;IACzB,4FAA4F;AAChG;;AAEA;IACI,yBAAyB;IACzB,gGAAgG;AACpG;;AAEA;IACI,yBAAyB;IACzB,0FAA0F;AAC9F;;AAEA;IACI,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,2BAA2B;IAC3B,gGAAgG;AACpG;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,+BAA+B;IAC/B,WAAW;IACX,+CAA+C;AACnD;;AAEA;IACI,kBAAkB;IAClB,4FAA4F;IAC5F,wBAAwB;IACxB,YAAY;IACZ,qBAAqB;IACrB,sCAAsC;IACtC,uEAAuE;IACvE,mDAAmD;AACvD;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,4FAA4F;IAC5F,6FAA6F;IAC7F,sBAAsB;IACtB,mGAAmG;IACnG,kCAAkC;IAClC,YAAY;IACZ,qBAAqB;IACrB,yBAAyB;AAC7B;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B",sourcesContent:['/* Fonts */\n@import url(\'https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Outfit&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap\');\n\n:root {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --staatliches-font-family: Staatliches, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --outfit-font-family: Outfit, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    \n    --weather-app-scale: 1.0;\n    --weather-app-min-width: 28rem;\n    --weather-app-max-width: 36rem;\n    --weather-app-info-buttons-size: 1.6rem;\n    --weather-app-info-buttons-font-size: 1rem;\n    --weather-app-city-font-size: 2rem;\n    --weather-app-region-font-size: 0.9rem;\n    --weather-app-country-font-size: 1.4rem;\n    --weather-app-temperature-font-size: 5rem;\n    --weather-app-icon-width: 3rem;\n    --weather-app-condition-font-size: 1.2rem;\n    --weather-app-wind-speed-font-size: 1rem;\n    --weather-app-wind-direction-font-size: 1rem;\n    --weather-app-humidity-font-size: 1rem;\n    --weather-app-precipitation-font-size: 1rem;\n    --weather-app-last-updated-font-size: 0.7rem;\n    --weather-app-search-bar-input-height: 2rem;\n    --weather-app-search-bar-button-size: 2.4rem;\n    --weather-app-search-bar-button-font-size: 1rem;\n}\n\n.weather-app-container {\n    display: grid;\n    grid-template-rows: repeat(3, auto);\n    gap: 0.5rem;\n    min-width: calc(var(--weather-app-min-width, 28rem) * var(--weather-app-scale, 1));\n    max-width: calc(var(--weather-app-max-width, 36rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-info-buttons {\n    grid-area: 1 / 1 / 2 / -1;\n    display: flex;\n    flex-wrap: nowrap;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-info-buttons > button {\n    height: calc(var(--weather-app-info-buttons-size, 1.6rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    font-size: calc(var(--weather-app-info-buttons-font-size, 1rem) * var(--weather-app-scale, 1));\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #eeeeee;\n    padding: 0rem calc(0.5rem * var(--weather-app-scale, 1));;\n}\n.weather-app-info-buttons > button:hover {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #f8f8f8;\n}\n.weather-app-info-buttons > button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #d1d1d1;\n}\n\n.weather-app-info-container {\n    grid-area: 2 / 1 / 3 / -1;\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(2, auto);\n    justify-items: center;\n    background-color: white;\n    outline: 2px solid #000;\n    border-radius: 1rem;\n    padding: 1rem;\n    gap: calc(0.3rem * var(--weather-app-scale, 1)) calc(1.0rem * var(--weather-app-scale, 1));\n}\n.weather-app-info-container.loading > * {\n    display: none;\n}\n.weather-app-info-container.loading::after {\n    content: "Loading...";\n    grid-area: 1 / 1 / -1 / -1;\n    align-self: center;\n}\n\n.weather-app-city {\n    grid-area: 1 / 2 / 2 / -1;\n    font-size: calc(var(--weather-app-city-font-size, 2rem) * var(--weather-app-scale, 1));\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.weather-app-region {\n    grid-area: 2 / 2 / 3 / -1;\n    font-size: calc(var(--weather-app-region-font-size, 0.9rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-country {\n    grid-area: 3 / 2 / 4 / -1;\n    font-size: calc(var(--weather-app-country-font-size, 1.4rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-temperature {\n    grid-area: 1 / 1 / 4 / 2;\n    font-family: var(--outfit-font-family);\n    font-size: calc(var(--weather-app-temperature-font-size, 5rem) * var(--weather-app-scale, 1));\n    white-space: nowrap;\n}\n\n.weather-app-icon {\n    grid-area: 4 / 1 / 7 / 2;\n    width: calc(var(--weather-app-icon-width, 3rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-condition {\n    grid-area: 7 / 1 / 9 / 2;\n    font-size: calc(var(--weather-app-condition-font-size, 1.2rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-wind-speed {\n    grid-area: 5 / 2 / 6 / -1;\n    font-size: calc(var(--weather-app-wind-speed-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-wind-direction {\n    grid-area: 6 / 2 / 7 / -1;\n    font-size: calc(var(--weather-app-wind-direction-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-humidity {\n    grid-area: 7 / 2 / 8 / -1;\n    font-size: calc(var(--weather-app-humidity-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-precipitation {\n    grid-area: 8 / 2 / 9 / -1;\n    font-size: calc(var(--weather-app-precipitation-font-size, 1rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-last-updated {\n    grid-area: 10 / 1 / -1 / -1;\n    font-size: calc(var(--weather-app-last-updated-font-size, 0.7rem) * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar {\n    grid-area: 3 / 1 / -1 / -1;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    width: 100%;\n    gap: calc(0.3rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-input {\n    align-self: center;\n    height: calc(var(--weather-app-search-bar-input-height, 2rem) * var(--weather-app-scale, 1));\n    outline: 1px solid black;\n    border: none;\n    border-radius: 0.4rem;\n    font-family: var(--nunito-font-family);\n    font-size: calc(var(--weather-app-search-bar-input-height, 2rem) * 0.9);\n    padding: calc(0.4rem * var(--weather-app-scale, 1));\n}\n\n.weather-app-search-bar-button {\n    justify-self: end;\n    align-self: center;\n    width: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    height: calc(var(--weather-app-search-bar-button-size, 2.4rem) * var(--weather-app-scale, 1));\n    color: rgb(44, 44, 44);\n    font-size: calc(var(--weather-app-search-bar-button-font-size, 1rem) * var(--weather-app-scale, 1));\n    outline: 1px solid rgb(49, 49, 49);\n    border: none;\n    border-radius: 9999px;\n    background-color: #eeeeee;\n}\n.weather-app-search-bar-button:hover {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #f8f8f8;\n}\n.weather-app-search-bar-button:active {\n    outline: 2px solid rgb(32, 32, 32);\n    background-color: #d1d1d1;\n}'],sourceRoot:""}]);const p=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var a="",t=void 0!==n[5];return n[4]&&(a+="@supports (".concat(n[4],") {")),n[2]&&(a+="@media ".concat(n[2]," {")),t&&(a+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),a+=e(n),t&&(a+="}"),n[2]&&(a+="}"),n[4]&&(a+="}"),a})).join("")},n.i=function(e,a,t,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var p=0;p<this.length;p++){var s=this[p][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);t&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),a&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=a):A[2]=a),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],a=e[3];if(!a)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(r," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function a(e){for(var a=-1,t=0;t<n.length;t++)if(n[t].identifier===e){a=t;break}return a}function t(e,t){for(var o={},i=[],p=0;p<e.length;p++){var s=e[p],c=t.base?s[0]+t.base:s[0],A=o[c]||0,l="".concat(c," ").concat(A);o[c]=A+1;var d=a(l),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(h);else{var u=r(h,t);t.byIndex=p,n.splice(p,0,{identifier:l,updater:u,references:1})}i.push(l)}return i}function r(e,n){var a=n.domAPI(n);return a.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;a.update(e=n)}else a.remove()}}e.exports=function(e,r){var o=t(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var p=a(o[i]);n[p].references--}for(var s=t(e,r),c=0;c<o.length;c++){var A=a(o[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=s}}},569:e=>{var n={};e.exports=function(e,a){var t=function(e){if(void 0===n[e]){var a=document.querySelector(e);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}n[e]=a}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(a)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,a)=>{e.exports=function(e){var n=a.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(a){!function(e,n,a){var t="";a.supports&&(t+="@supports (".concat(a.supports,") {")),a.media&&(t+="@media ".concat(a.media," {"));var r=void 0!==a.layer;r&&(t+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),t+=a.css,r&&(t+="}"),a.media&&(t+="}"),a.supports&&(t+="}");var o=a.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,a)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function a(t){var r=n[t];if(void 0!==r)return r.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,a),o.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.nc=void 0,(()=>{var e=a(379),n=a.n(e),t=a(795),r=a.n(t),o=a(569),i=a.n(o),p=a(565),s=a.n(p),c=a(216),A=a.n(c),l=a(589),d=a.n(l),h=a(28),u={};u.styleTagTransform=d(),u.setAttributes=s(),u.insert=i().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=A(),n()(h.Z,u),h.Z&&h.Z.locals&&h.Z.locals;var m=a(439),w={};m.Z&&m.Z.locals&&(w.locals=m.Z.locals);var f,C=0,g={};g.styleTagTransform=d(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=A(),w.use=function(e){return g.options=e||{},C++||(f=n()(m.Z,g)),w},w.unuse=function(){C>0&&!--C&&(f(),f=null)};const I=w,v=document.querySelector("body"),y=(()=>{let e=null,n="celsius",a="mph",t="mm";const r=(e=[],n=null,a="",t="")=>{const r=document.createElement("div");e.forEach((e=>{"string"==typeof e&&e.length>0&&r.classList.add(e)})),"string"==typeof a&&a.length>0&&r.setAttribute("id",a),"string"==typeof t&&t.length>0&&(r.textContent=t);try{n&&n.appendChild(r)}catch(e){console.log(e)}return r},o=r(["weather-app-container"]),i=r(["weather-app-info-buttons"],o),p=document.createElement("button");p.classList.add("weather-app-temperature-button"),p.addEventListener("click",(()=>{n="celsius"===n?"fahrenheit":"celsius",S()})),i.appendChild(p);const s=document.createElement("button");s.classList.add("weather-app-wind-speed-button"),s.addEventListener("click",(()=>{a="kph"===a?"mph":"kph",S()})),i.appendChild(s);const c=document.createElement("button");c.classList.add("weather-app-precipitation-button"),c.addEventListener("click",(()=>{t="mm"===t?"in":"mm",S()})),i.appendChild(c);const A=r(["weather-app-info-container"],o),l=r(["weather-app-temperature"],A),d=document.createElement("img");d.classList.add("weather-app-icon"),A.appendChild(d);const h=r(["weather-app-condition"],A),u=r(["weather-app-city"],A),m=r(["weather-app-region"],A),w=r(["weather-app-country"],A),f=r(["weather-app-wind-direction"],A),C=r(["weather-app-wind-speed"],A),g=r(["weather-app-humidity"],A),I=r(["weather-app-precipitation"],A),v=r(["weather-app-last-updated"],A),y=async n=>{A.classList.add("loading");try{const a=await B(),t=await fetch(`https://api.weatherapi.com/v1/current.json?key=${a}&q=${n}`,{mode:"cors"});if(!t.ok)throw new Error("Weather response is not ok.");const r=await t.json();e=b(r),S()}catch(e){console.log(`Error! ${e.message}`)}A.classList.remove("loading")},b=e=>({countryName:e.location.country,cityName:e.location.name,region:e.location.region,localTime:e.location.localtime,tempc:e.current.temp_c,tempf:e.current.temp_f,humidity:e.current.humidity,windDeg:e.current.wind_degree,windDir:e.current.wind_dir,windSpeedMph:e.current.wind_mph,windSpeedKph:e.current.wind_kph,precipInch:e.current.precip_in,precipMm:e.current.precip_mm,conditionText:e.current.condition.text,conditionIcon:e.current.condition.icon,lastUpdated:e.current.last_updated}),B=()=>"defd47dda70843cfaa084416232506",z=r(["weather-app-search-bar"]),x=document.createElement("input"),E=document.createElement("button");x.classList.add("weather-app-search-bar-input"),E.classList.add("weather-app-search-bar-button"),E.classList.add("material-symbols-rounded"),E.textContent="Search",E.addEventListener("click",(()=>{y(x.value)})),z.appendChild(x),z.appendChild(E),o.appendChild(z);const S=async()=>{if(e){A.classList.add("loading");try{"celsius"===n?(p.textContent="°C",l.textContent=`${e.tempc}°C`):(p.textContent="°F",l.textContent=`${e.tempf}°f`),d.src=await e.conditionIcon,h.textContent=e.conditionText,u.textContent=e.cityName,m.textContent=e.region,w.textContent=e.countryName,f.textContent=`Wind Direction: ${e.windDeg}° (${e.windDir})`,"mph"===a?(s.textContent="mph",C.textContent=`Wind Speed: ${e.windSpeedMph} miles per hour`):(s.textContent="kph",C.textContent=`Wind Speed: ${e.windSpeedKph} kilometres per hour`),g.textContent=`Humidity: ${e.humidity}%`,"mm"===t?(c.textContent="mm",I.textContent=`Precipitation: ${e.precipMm} millimetres`):(c.textContent="in",I.textContent=`Precipitation: ${e.precipInch} inches`),v.textContent=`Last Updated: ${e.lastUpdated}`}catch(e){console.log(`Weather app refresh error: ${e.message}`)}A.classList.remove("loading")}};return y("london"),o})();v.appendChild(y),I.use()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,